{"version":3,"file":"static/js/35.a7efe1a5.chunk.js","mappings":"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","sources":["components/ModalWindow/ModalWindow.jsx","components/ContactEditor/ContactEditor.jsx","redux/contacts/selectors.js","components/Contact/Contact.jsx","components/Find/FindNumberByName.jsx","redux/filter/selectors.js","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Text,\n} from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\n\nexport const ModalWindow = ({\n  isOpen,\n  onClose,\n  getContact,\n  contact,\n  boolean,\n}) => {\n  const [name, setName] = useState(contact?.name ?? '');\n  const [number, setNumber] = useState(contact?.number ?? '');\n  const [errorName, setErrorName] = useState('');\n  const [errorNumber, setErrorNumber] = useState('');\n  const [validName, setValidName] = useState(boolean);\n  const [validNumber, setValidNumber] = useState(boolean);\n  const [validForm, setValidForm] = useState(boolean);\n\n  const handleInputName = e => {\n    setName(e.target.value);\n    const pattern =\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n    if (pattern.test(e.target.value)) {\n      setErrorName('');\n      setValidName(true);\n    } else {\n      setErrorName('Wrong name format!');\n      setValidName(false);\n    }\n  };\n\n  const handleInputNumber = e => {\n    setNumber(e.target.value);\n    const pattern =\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n    if (pattern.test(e.target.value)) {\n      setErrorNumber('');\n      setValidNumber(true);\n    } else {\n      setErrorNumber('Wrong phone number format!');\n      setValidNumber(false);\n    }\n  };\n\n  const validationForm = () => {\n    if (validName === true && validNumber === true) {\n      setValidForm(true);\n    }\n    if (validName === false || validNumber === false) {\n      setValidForm(false);\n    }\n  };\n\n  useEffect(() => validationForm())\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const newContact = { name, number };\n\n    getContact(e, newContact);\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Create your account</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody pb={6}>\n          <FormControl>\n            <FormLabel>Name</FormLabel>\n            <Input\n              placeholder=\"Name\"\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              value={name}\n              onChange={handleInputName}\n            />\n            <Text color=\"red\">{errorName}</Text>\n          </FormControl>\n\n          <FormControl mt={4}>\n            <FormLabel>Number</FormLabel>\n            <Input\n              placeholder=\"Number\"\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              value={number}\n              onChange={handleInputNumber}\n            />\n            <Text color=\"red\">{errorNumber}</Text>\n          </FormControl>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button\n            colorScheme=\"blue\"\n            mr={3}\n            onClick={handleSubmit}\n            isDisabled={!validForm}\n          >\n            Save\n          </Button>\n          <Button onClick={onClose}>Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nModalWindow.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  getContact: PropTypes.func.isRequired,\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  boolean: PropTypes.bool.isRequired,\n};\n","import { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { useDisclosure } from '@chakra-ui/react';\nimport { ModalWindow } from 'components/ModalWindow/ModalWindow';\nimport { Button } from '@chakra-ui/react';\n\nexport const ContactEditor = () => {\n  const dispatch = useDispatch();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const getContact = (e, newContact) => {\n    e.preventDefault();\n\n    dispatch(addContact(newContact));\n\n    onClose();\n  };\n\n  return (\n    <>\n      <Button type=\"button\" onClick={onOpen} colorScheme=\"blue\">\n        Create contact\n      </Button>\n      <ModalWindow isOpen={isOpen} onClose={onClose} getContact={getContact} boolean={false}/>\n    </>\n  );\n};\n","export const selectLoading = state => state.contacts.isLoading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;","import { useDisclosure } from '@chakra-ui/react';\nimport { ModalWindow } from 'components/ModalWindow/ModalWindow';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact, updateContact } from 'redux/contacts/operations';\nimport { Box, Text, Button } from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\n\nexport const Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const getContact = (e, editedContact) => {\n    e.preventDefault();\n    const { name, number } = editedContact;\n\n    dispatch(updateContact({id: contact.id, name, number}));\n\n    onClose();\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      gap=\"8px\"\n      padding=\"4px\"\n      pl=\"16px\"\n      border=\"1px\"\n      borderColor=\"#2a2a2a\"\n      borderRadius=\"4px\"\n    >\n      <Text>\n        {contact.name}: {contact.number}\n      </Text>\n      <Box>\n        <Button onClick={onOpen} colorScheme=\"blue\" mr=\"10px\">\n        Edit\n      </Button>\n      <Button type=\"button\" onClick={handleDelete} colorScheme=\"blue\">\n        Delete\n      </Button>\n      </Box>\n      <ModalWindow\n        isOpen={isOpen}\n        onClose={onClose}\n        getContact={getContact}\n        contact={contact}\n        boolean={true}\n      />\n    </Box>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  })\n};","import { FormControl, FormLabel, Input } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { filterContact } from 'redux/filter/slice';\n\nexport const FindNumberByName = () => {\n  const dispatch = useDispatch();\n\n  const handleFindNumber = e => {\n    dispatch(filterContact(e.target.value));\n  };\n\n  return (\n    <FormControl mt=\"16px\">\n      <FormLabel>Find number by name</FormLabel>\n      <Input type=\"text\" onChange={handleFindNumber} />\n    </FormControl>\n  );\n};\n","export const selectFilterQuery = state => state.filter;","import { useSelector } from 'react-redux';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport { List, ListItem, Text } from '@chakra-ui/react';\nimport { Contact } from 'components/Contact/Contact';\nimport { FindNumberByName } from 'components/Find/FindNumberByName';\nimport { selectFilterQuery } from 'redux/filter/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectAllContacts);\n  const state = useSelector(selectFilterQuery);\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = state.filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  return (\n    <>\n      {contacts.length === 0 ? (\n        <Text fontSize=\"5xl\" textAlign=\"center\" mt=\"30px\">\n          Create a contact\n        </Text>\n      ) : (\n        <>\n          <FindNumberByName />\n          <List\n            mt=\"16px\"\n            display=\"grid\"\n            gridTemplateColumns=\"1fr\"\n            gridGap=\"12px\"\n          >\n            {getVisibleContacts().map(contact => (\n              <ListItem key={contact.id}>\n                <Contact contact={contact} />\n              </ListItem>\n            ))}\n          </List>\n        </>\n      )}\n    </>\n  );\n};\n","import { ContactEditor } from \"components/ContactEditor/ContactEditor\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { selectLoading } from \"redux/contacts/selectors\";\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactEditor />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;"],"names":["ModalWindow","isOpen","onClose","getContact","contact","boolean","useState","name","setName","number","setNumber","errorName","setErrorName","errorNumber","setErrorNumber","validName","setValidName","validNumber","setValidNumber","validForm","setValidForm","useEffect","resetForm","pb","I","placeholder","type","pattern","title","required","value","onChange","e","target","test","color","mt","colorScheme","mr","onClick","preventDefault","isDisabled","ContactEditor","dispatch","useDispatch","useDisclosure","onOpen","newContact","addContact","selectLoading","state","contacts","isLoading","selectAllContacts","items","Contact","display","justifyContent","alignItems","gap","padding","pl","border","borderColor","borderRadius","deleteContact","id","editedContact","updateContact","FindNumberByName","filterContact","selectFilterQuery","filter","ContactList","useSelector","length","fontSize","textAlign","gridTemplateColumns","gridGap","normalizedFilter","toLowerCase","includes","getVisibleContacts","map","fetchContacts"],"sourceRoot":""}