{"version":3,"file":"static/js/236.9733341b.chunk.js","mappings":"+PAMMA,EAAgB,CACpBC,KAAM,GACNC,MAAO,GACPC,SAAU,IAGNC,EAAeC,EAAAA,KAAaC,MAAM,CACtCL,KAAMI,EAAAA,KACHE,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZP,MAAOG,EAAAA,KAAaH,MAAM,iBAAiBO,SAAS,YACpDN,SAAUE,EAAAA,KACPE,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,cAGDC,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAgBjB,OACE,SAAC,KAAD,CAAQZ,cAAeA,EAAea,iBAAkBT,EAAcU,SAfnD,SAACC,EAAQC,GAC5B,IAAQf,EAA0Bc,EAA1Bd,KAAMC,EAAoBa,EAApBb,MAAOC,EAAaY,EAAbZ,SAErBQ,GACEM,EAAAA,EAAAA,IAAS,CACPhB,KAAAA,EACAC,MAAAA,EACAC,SAAAA,KAIJa,EAAQE,WACT,EAGC,SACG,SAAAC,GAAK,OACJ,UAAC,KAAD,YACE,SAAC,KAAD,CAAOlB,KAAK,OAAZ,SACG,gBAAGmB,EAAH,EAAGA,MAAH,OACC,UAAC,KAAD,YACE,SAAC,IAAD,wBACA,SAAC,EAAAC,GAAD,kBAAWD,GAAX,IAAkBE,KAAK,OAAOrB,KAAK,YAHtC,KAOH,SAAC,KAAD,CAAOA,KAAK,QAAZ,SACG,gBAAGmB,EAAH,EAAGA,MAAH,OACC,UAAC,KAAD,CAAaG,GAAI,EAAjB,WACE,SAAC,IAAD,qBACA,SAAC,EAAAF,GAAD,kBAAWD,GAAX,IAAkBE,KAAK,QAAQrB,KAAK,aAHvC,KAOH,SAAC,KAAD,CAAOA,KAAK,WAAZ,SACG,gBAAGmB,EAAH,EAAGA,MAAH,OACC,UAAC,KAAD,CAAaG,GAAI,EAAjB,WACE,SAAC,IAAD,wBACA,SAAC,EAAAF,GAAD,kBAAWD,GAAX,IAAkBE,KAAK,WAAWrB,KAAK,gBAH1C,KAOH,SAAC,IAAD,CACEsB,GAAI,EACJC,YAAY,OACZC,UAAWN,EAAMO,aACjBJ,KAAK,SAJP,sBA1BE,GAsCX,ECvED,EARiB,WACb,OACI,0BACI,SAACZ,EAAD,KAGX,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { Input, Button, FormControl, FormLabel } from '@chakra-ui/react';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  email: Yup.string().email('Invalid email').required('Required'),\n  password: Yup.string()\n    .min(5, 'Too Short!')\n    .max(16, 'Too Long!')\n    .required('Required'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    const { name, email, password } = values;\n\n    dispatch(\n      register({\n        name,\n        email,\n        password,\n      })\n    );\n\n    actions.resetForm();\n  };\n\n  return (\n    <Formik initialValues={initialValues} validationSchema={SignupSchema} onSubmit={handleSubmit}>\n      {props => (\n        <Form>\n          <Field name=\"name\">\n            {({ field }) => (\n              <FormControl>\n                <FormLabel>Username</FormLabel>\n                <Input {...field} type=\"text\" name=\"name\" />\n              </FormControl>\n            )}\n          </Field>\n          <Field name=\"email\">\n            {({ field }) => (\n              <FormControl mt={4}>\n                <FormLabel>Email</FormLabel>\n                <Input {...field} type=\"email\" name=\"email\" />\n              </FormControl>\n            )}\n          </Field>\n          <Field name=\"password\">\n            {({ field }) => (\n              <FormControl mt={4}>\n                <FormLabel>Password</FormLabel>\n                <Input {...field} type=\"password\" name=\"password\" />\n              </FormControl>\n            )}\n          </Field>\n          <Button\n            mt={4}\n            colorScheme=\"blue\"\n            isLoading={props.isSubmitting}\n            type=\"submit\"\n          >\n            Submit\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import { RegisterForm } from \"components/RegisterForm/RegisterForm\"\n\nconst Register = () => {\n    return (\n        <div>\n            <RegisterForm />\n        </div>\n    )\n}\n\nexport default Register;"],"names":["initialValues","name","email","password","SignupSchema","Yup","shape","min","max","required","RegisterForm","dispatch","useDispatch","validationSchema","onSubmit","values","actions","register","resetForm","props","field","I","type","mt","colorScheme","isLoading","isSubmitting"],"sourceRoot":""}